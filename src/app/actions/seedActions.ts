
'use server';

import { createPerson, findPersonByEmail } from '@/services/personService';
import type { PersonCreationData } from '@/types'; // Use PersonCreationData
// Firebase Admin SDK or auth client should be used here if creating auth user.
// For simplicity, this seed will only create Firestore doc and assumes auth user exists or is created elsewhere.
// Ideally, seeding would also create a Firebase Auth user.

export async function seedSabineMueller(): Promise<{ success: boolean; message: string }> {
  const sabineEmail = 'sabine.mueller@example.com';
  // IMPORTANT: This seed will NOT create a Firebase Auth user.
  // It assumes a Firebase Auth user with this email (and a known UID) would be created separately
  // or that this is just for Firestore data seeding and login will be mocked/handled.
  // For a real seed, you'd use Firebase Admin SDK to create both Auth user and Firestore doc.
  // The UID here would come from the created Auth user. For this example, we'll use a placeholder.
  // Let's assume a pre-existing auth user or a scenario where this is primarily for Firestore.
  // The actual UID would be generated by Firebase Auth.
  
  // To make this seed runnable without manually creating an Auth user first and getting its UID,
  // we are limited. The `createPerson` now expects a UID.
  // This seed function's utility is reduced without Admin SDK access to create an Auth user.
  // We will check if the user exists by email in Firestore.
  // If we were to create an auth user, we would use its UID.

  try {
    const existingUser = await findPersonByEmail(sabineEmail);
    if (existingUser) {
      return { success: true, message: `Sabine Müller already exists in Firestore with ID: ${existingUser.id}. No new document created.` };
    }

    // Since we don't have auth user creation here, we cannot truly "seed" a complete user
    // that would work with the new AuthContext. This seed action becomes problematic.
    // For demonstration, let's say we are ONLY seeding the Firestore part and Auth user is handled externally.
    // We would need a UID. For now, this seed function is more of a placeholder
    // without the ability to create the auth user side.

    // This is a conceptual problem with client-side seeding of auth-linked data.
    // Let's return an informative message.
    return { 
      success: false, 
      message: "Seeding Sabine Müller with Firebase Auth integration requires creating an Auth user first. This client-side seed cannot do that. Please use the registration flow or Firebase Admin SDK for full user creation." 
    };

    // If we had a UID (e.g., from a manually created Auth user):
    // const sabineUID = "some-firebase-auth-uid-for-sabine";
    // const sabineData: PersonCreationData & { email: string } = {
    //   name: 'Dr. Sabine Müller',
    //   email: sabineEmail,
    //   role: 'dentist',
    //   region: 'Bayern',
    //   dentistId: 'ZA-2025-0842',
    //   avatarUrl: 'https://placehold.co/100x100.png?text=SM',
    //   status: 'active',
    //   otpEnabled: false,
    // };

    // await createPerson(sabineUID, sabineData);
    // console.log('Successfully seeded Sabine Müller Firestore data for UID:', sabineUID);
    // return { success: true, message: `Sabine Müller Firestore data seeded for UID: ${sabineUID}. Ensure Auth user exists.` };

  } catch (error) {
    console.error('Error seeding Sabine Müller:', error);
    const errorMessage = error instanceof Error ? error.message : String(error);
    return { success: false, message: `Error seeding Sabine Müller: ${errorMessage}` };
  }
}
